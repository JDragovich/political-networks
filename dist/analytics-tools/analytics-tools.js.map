{"version":3,"sources":["analytics-tools/analytics-tools.js"],"names":["createRange","split","newMap","Map","i","set","toFixed","Math","log10","histogramHashmapToArray","bins","binArray","keys","bin","push","key","keyString","toString","value","get","sortNodes","node","total","numIssues","decimalPlaces","size","issues","issue","binNumber","has"],"mappings":";;;;;AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA2B;AACvB,QAAIC,SAAS,IAAIC,GAAJ,EAAb;;AAEA,SAAI,IAAIC,IAAG,CAAX,EAAcA,KAAG,CAAjB,EAAoBA,KAAI,IAAEH,KAA1B,EAAgC;AAC5BC,eAAOG,GAAP,CAAWD,EAAEE,OAAF,CAAUC,KAAKC,KAAL,CAAWP,KAAX,CAAV,CAAX,EAAyC,CAAzC;AACH;;AAED,WAAOC,MAAP;AACH;;AAED,SAASO,uBAAT,CAAiCC,IAAjC,EAAsC;AAClC,QAAIC,WAAW,EAAf;;AADkC;AAAA;AAAA;;AAAA;AAGlC,6BAAeD,KAAKE,IAAL,EAAf,8HAA2B;AAAA,gBAAnBC,GAAmB;;AACvBF,qBAASG,IAAT,CAAc;AACVC,qBAAIF,GADM;AAEVG,2BAAUH,IAAII,QAAJ,EAFA;AAGVC,uBAAMR,KAAKS,GAAL,CAASN,GAAT;AAHI,aAAd;AAKH;AATiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWlC,WAAOF,QAAP;AACH;;AAED;AACA,SAASS,SAAT,CAAmBV,IAAnB,EAAyBW,IAAzB,EAA8B;AAC1B,QAAIC,QAAQ,CAAZ;AACA,QAAIC,YAAY,CAAhB;AACA,QAAIC,gBAAgBjB,KAAKC,KAAL,CAAWE,KAAKe,IAAhB,CAApB;;AAH0B;AAAA;AAAA;;AAAA;AAM1B,8BAAiBJ,KAAKK,MAAL,CAAYd,IAAZ,EAAjB,mIAAoC;AAAA,gBAA5Be,KAA4B;;AAChCL,qBAASD,KAAKK,MAAL,CAAYP,GAAZ,CAAgBQ,KAAhB,CAAT;AACAJ;AACH;AATyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAW1B,QAAIK,YAAY,CAACN,QAAMC,SAAP,EAAkBjB,OAAlB,CAA0BkB,aAA1B,CAAhB;;AAEA,QAAGd,KAAKmB,GAAL,CAASD,SAAT,CAAH,EAAuB;AACnBlB,aAAKL,GAAL,CAASuB,SAAT,EAAmBlB,KAAKS,GAAL,CAASS,SAAT,IAAsB,CAAzC;AACH,KAFD,MAGI;AACAlB,aAAKL,GAAL,CAASuB,SAAT,EAAoB,CAApB;AACH;;AAED,WAAOlB,IAAP;AACH;;QAEQV,W,GAAAA,W;QAAaS,uB,GAAAA,uB;QAAyBW,S,GAAAA,S","file":"analytics-tools.js","sourcesContent":["function createRange(split){\r\n    let newMap = new Map();\r\n\r\n    for(let i =0; i<=1; i+= 1/split){\r\n        newMap.set(i.toFixed(Math.log10(split)), 0);\r\n    }\r\n\r\n    return newMap;\r\n}\r\n\r\nfunction histogramHashmapToArray(bins){\r\n    let binArray = [];\r\n\r\n    for(let bin of bins.keys()){\r\n        binArray.push({\r\n            key:bin,\r\n            keyString:bin.toString(),\r\n            value:bins.get(bin)\r\n        })\r\n    }\r\n\r\n    return binArray;\r\n}\r\n\r\n//make a distribution of nodes based on average of issues\r\nfunction sortNodes(bins, node){\r\n    let total = 0;\r\n    let numIssues = 0;\r\n    let decimalPlaces = Math.log10(bins.size);\r\n\r\n\r\n    for(let issue of node.issues.keys()){\r\n        total += node.issues.get(issue);\r\n        numIssues++;\r\n    }\r\n\r\n    let binNumber = (total/numIssues).toFixed(decimalPlaces);\r\n\r\n    if(bins.has(binNumber)){\r\n        bins.set(binNumber,bins.get(binNumber) + 1);\r\n    }\r\n    else{\r\n        bins.set(binNumber, 1);\r\n    }\r\n\r\n    return bins;\r\n}\r\n\r\nexport { createRange, histogramHashmapToArray, sortNodes};\r\n"]}