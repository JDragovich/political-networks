{"version":3,"sources":["graph-utils/graph-utils.js"],"names":["barbasiAlbert","nodes","node","edges","forEach","currentNode","probability","connections","length","Math","random","isNaN","push","name","strength","createLiveNetwork","nodeMap","findNode","i","liveNodes","map","newNode","issues","index","connection","liveElection","candidate","votes","mapFromObject","createGraph","numNodes","people","totalPoluation","population","floor","foo","bar","scub","object","mapArray","prop","hasOwnProperty","Map","influenceNodes","changeMap","Array","from","keys","e","issue","get","set","applyInfluence","value","key","createDistricts","number","districts","addIssue","issueName","district","populations","poputation","pollElection","election","totalPopulation","reduce","total","current","sampleSize","round","pow","reality","getElectionResults","realityArray","uuid","findSample","array","sample","position","element","samples","fill","console","log","candidates","find","polling","sampleDistrict","samplePosition","sampleIndex","probabilityDistribution","candidateIndex","results","c","d"],"mappings":"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","file":"graph-utils.js","sourcesContent":["import { Population } from '../classes/population.class.js';\r\nimport { District } from '../classes/district.class.js';\r\nimport { Node } from '../classes/node.class.js';\r\n\r\nimport { softmax, issueDifference, shiftAndClip, determineVoteShare } from '../player-utils/player-utils.js';\r\n\r\n\r\n// returns a new set of edges for a new node\r\n// creates a structure that can be strinigified\r\n// use createLiveNetwork to create network in memory\r\nfunction barbasiAlbert(nodes, node, edges){\r\n\r\n    nodes.forEach((currentNode)=>{\r\n\r\n        let probability = currentNode.connections.length / edges.length * 2;\r\n\r\n        if(Math.random() < probability || isNaN(probability)){\r\n\r\n            edges.push({\r\n                nodes:[currentNode.name, node.name],\r\n                strength: probability\r\n            });\r\n\r\n            currentNode.connections.push(node.name);\r\n            node.connections.push(currentNode.name);\r\n\r\n        }\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction createLiveNetwork(nodeMap){\r\n\r\n    // naive search for node by name\r\n    function findNode(nodes, name){\r\n        for(let i=0; i < nodes.length; i++){\r\n            if(nodes[i].name === name){\r\n                return nodes[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    // instantiate live nodes\r\n    let liveNodes = nodeMap.map((node)=>{\r\n        let newNode = new Node(node.name, node.issues);\r\n\r\n        return newNode;\r\n    });\r\n\r\n    liveNodes.forEach((node, index)=>{\r\n        nodeMap[index].connections.forEach((connection)=>{\r\n            node.connections.push(findNode(liveNodes,connection));\r\n        });\r\n    });\r\n\r\n    return liveNodes;\r\n\r\n}\r\n\r\nfunction liveElection(candidate){\r\n    let newNode = {};\r\n\r\n    newNode.name = candidate.name;\r\n    newNode.votes = candidate.votes;\r\n    newNode.issues = mapFromObject(candidate.issues);\r\n\r\n    return newNode;\r\n}\r\n\r\nfunction createGraph(numNodes){\r\n\r\n    let people = [];\r\n    let connections= [];\r\n    let totalPoluation = 0;\r\n\r\n    for(let i=0; i<numNodes; i++){\r\n        let population = Math.floor(Math.random()*100000);\r\n        totalPoluation += population;\r\n\r\n        let newNode = { //stuuf\r\n            name:`Interest Group ${i}`,\r\n            connections:[],\r\n            issues:{\r\n                foo:Math.random(),\r\n                bar:Math.random(),\r\n                scub:Math.random()\r\n            }\r\n        };\r\n\r\n        barbasiAlbert(people, newNode, connections);\r\n\r\n        people.push(newNode);\r\n    }\r\n\r\n    return {\r\n        nodes:people,\r\n        edges:connections,\r\n        totalPoluation:totalPoluation\r\n    }\r\n}\r\n\r\nfunction mapFromObject(object){\r\n    let mapArray = [];\r\n\r\n    for(let prop in object){\r\n        if(object.hasOwnProperty(prop)){\r\n            mapArray.push([prop,object[prop]]);\r\n        }\r\n    }\r\n\r\n    return new Map(mapArray);\r\n}\r\n\r\nfunction influenceNodes(node){\r\n    node.changeMap = new Map(Array.from(node.issues.keys()).map(e => [e,0]));\r\n    node.connections.forEach((connection)=>{\r\n        /*\r\n        for(let issue of node.issues.keys()){\r\n            let modifier = node.population/connection.population < 100 ? node.population/connection.population : 100;\r\n\r\n            let issueValue = connection.issues.get(issue) - ((connection.issues.get(issue) - node.issues.get(issue))/100) * modifier;\r\n            connection.issues.set(issue,issueValue);\r\n\r\n        }\r\n        */\r\n\r\n        for(let issue of node.issues.keys()){\r\n            if(connection.issues.get(issue) > node.issues.get(issue)){\r\n                node.changeMap.set(issue, node.changeMap.get(issue) + .1);\r\n            }\r\n            else{\r\n                node.changeMap.set(issue, node.changeMap.get(issue) - .1);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nfunction applyInfluence(node){\r\n    node.issues.forEach((value, key)=>{\r\n        node.issues.set(key, shiftAndClip(value, node.changeMap.get(key)));\r\n    });\r\n}\r\n\r\n// create districts and link them to parent nodes.\r\nfunction createDistricts(number, nodes) {\r\n    let districts = [];\r\n    for(let i = 0; i<number; i++){\r\n        districts.push(new District(`District ${i}`, nodes));\r\n    }\r\n\r\n    return districts;\r\n}\r\n\r\nfunction addIssue(issueName, issue, nodes, districts){\r\n    nodes.forEach(node=>{\r\n        node.issues.set(issueName,issue);\r\n    });\r\n\r\n    districts.forEach(district=>{\r\n        district.populations.forEach(population => poputation.addIssue(issue));\r\n    })\r\n}\r\n\r\nfunction pollElection(election){\r\n    let totalPopulation = election.districts.reduce((total, district)=>{\r\n        return total + district.populations.reduce((current, population) => current + population.population ,0);\r\n    },0);\r\n\r\n    let sampleSize = Math.round(totalPopulation / (1 + totalPopulation * Math.pow(0.05, 2)));\r\n\r\n    let reality = getElectionResults(election);\r\n    let realityArray = [];\r\n\r\n    for(let uuid in reality){\r\n        if(reality.hasOwnProperty(uuid)){\r\n            realityArray.push({uuid:uuid, votes:reality[uuid]});\r\n        }\r\n    }\r\n\r\n    //returns the index of the array element that is the sume of the arithmetic sequence of the array elements.\r\n    function findSample(array, sample){\r\n        let position = 0;\r\n        for(let element of array){\r\n            position += element.votes;\r\n\r\n            if(position >= sample){\r\n                return element.uuid;\r\n            }\r\n\r\n        }\r\n\r\n        return \"none\";\r\n    }\r\n\r\n    let samples = new Array(sampleSize).fill(0)\r\n                                       .map(e => Math.floor(Math.random() * totalPopulation))\r\n                                       .map(e => findSample(realityArray,e))\r\n                                       .reduce((current,uuid) => {\r\n                                            if(current[uuid]){\r\n                                                current[uuid]++;\r\n                                            }\r\n                                            else{\r\n                                                current[uuid] = 1;\r\n                                            }\r\n                                            \r\n                                            return current;\r\n                                        }, {});\r\n                                        console.log(samples);\r\n    for(let uuid in samples){\r\n        if(uuid !== \"none\" && samples.hasOwnProperty(uuid)){\r\n            console.log(uuid !== null);\r\n            election.candidates.find(e => e.uuid === uuid).polling = (samples[uuid]/sampleSize);\r\n        }\r\n    }\r\n    /*\r\n    let samples =  new Array(sampleSize).fill(0)\r\n                                        .map(e => Math.floor(Math.random() * election.districts.length))\r\n                                        .map(e => {\r\n                                            return sampleDistrict(election.districts[e], election.candidates);\r\n                                        })\r\n                                        .reduce((current,uuid) => {\r\n                                            if(current[uuid]){\r\n                                                current[uuid]++;\r\n                                            }\r\n                                            else{\r\n                                                current[uuid] = 1;\r\n                                            }\r\n                                            \r\n                                            return current;\r\n                                        }, {});\r\n\r\n    for(let uuid in samples){\r\n        if(samples.hasOwnProperty(uuid)){\r\n            console.log(uuid);\r\n            election.candidates.find(e => e.uuid === uuid).polling = (samples[uuid]/sampleSize);\r\n        }\r\n    }\r\n    */\r\n}\r\n\r\nfunction sampleDistrict(district, candidates){\r\n    let totalPopulation = district.populations.reduce((current, population) => current + population.population ,0);\r\n\r\n    // Caluclate sample size with Slovin's formula\r\n    // want it with 5% confidence interval\r\n    let sampleSize = totalPopulation / (1 + totalPopulation * Math.pow(0.05, 2));\r\n\r\n    //returns the index of the array element that is the sume of the arithmetic sequence of the array elements.\r\n    function findSample(array, sample){\r\n        let position = 0;\r\n        let index = 0;\r\n        for(let element of array){\r\n            position += element;\r\n\r\n            if(position >= sample){\r\n                return index;\r\n            }\r\n\r\n            index++;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    let samplePosition = Math.round(Math.random() * totalPopulation);\r\n    let sampleIndex = findSample(district.populations.map(e => e.population), samplePosition);\r\n    let sample = district.populations[sampleIndex];\r\n\r\n    let probabilityDistribution = softmax(candidates.map(issueDifference,sample)).map(e => 1 - e);\r\n    let candidateIndex = findSample(probabilityDistribution, Math.random());\r\n\r\n    return candidates[candidateIndex].uuid;\r\n\r\n}\r\n\r\nfunction getElectionResults(election){\r\n    return election.districts.reduce((current, district) => {\r\n        let results = district.populations.map(e => determineVoteShare(election.candidates,e))\r\n\r\n        return results.reduce((c,e)=>{\r\n            e.forEach(d => {\r\n                if(c[d.uuid]){\r\n                    c[d.uuid] += d.votes;\r\n                }\r\n                else{\r\n                    c[d.uuid] = d.votes;\r\n                }\r\n            });\r\n\r\n            return c;\r\n        },current)\r\n    }, {});\r\n}\r\n\r\nexport { liveElection, \r\n         pollElection, \r\n         createLiveNetwork, \r\n         influenceNodes, \r\n         applyInfluence, \r\n         createGraph, \r\n         mapFromObject, \r\n         createDistricts, \r\n         sampleDistrict, \r\n         getElectionResults };\r\n"]}