{"version":3,"sources":["game/game.js"],"names":["graphUtils","test","arg","newGameState","numNodes","numDistricts","numPlayers","gameState","graph","createGraph","nodes","createLiveNetwork","districts","createDistricts","players","week","nextElection","chanceOfEvent","currentPlayerIndex","i","push","name","money","type","nextWeek","Math","random","forEach","influenceNodes","nextTurn","console","log","length","addCandidate","district","candidate","candidates","generateCandidates","palyer","number","seeds","Array","fill","map","floor","seed","index","issues","Map","populations","node","entries","Candidate","player","getCurrentPlayer","game"],"mappings":";;;;;;;AAAA;;IAAYA,U;;;;AAEZ,SAASC,IAAT,CAAcC,GAAd,EAAkB;AACd,uDAAiDA,GAAjD;AACH;;AAED;AACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,YAAhC,EAA+CC,UAA/C,EAA0D;AACtD,QAAIC,YAAY,EAAhB;;AAEA,QAAIC,QAAQR,WAAWS,WAAX,CAAuBL,QAAvB,CAAZ;;AAEAG,cAAUG,KAAV,GAAkBV,WAAWW,iBAAX,CAA6BH,MAAME,KAAnC,CAAlB;AACAH,cAAUK,SAAV,GAAsBZ,WAAWa,eAAX,CAA2BR,YAA3B,EAAyCE,UAAUG,KAAnD,CAAtB;AACAH,cAAUO,OAAV,GAAoB,EAApB;AACAP,cAAUQ,IAAV,GAAiB,CAAjB;AACAR,cAAUS,YAAV,GAAyB,EAAzB;AACAT,cAAUU,aAAV,GAA0B,IAA1B;AACAV,cAAUW,kBAAV,GAA+B,CAA/B;;AAGA,SAAI,IAAIC,IAAE,CAAV,EAAaA,IAAEb,UAAf,EAA2Ba,GAA3B,EAA+B;AAC3BZ,kBAAUO,OAAV,CAAkBM,IAAlB,CAAuB;AACnBC,8BAAgBF,CADG;AAEnBG,mBAAM,KAFa;AAGnBC,kBAAK;AAHc,SAAvB;AAKH;;AAED,WAAOhB,SAAP;AAEH;;AAED;AACA,SAASiB,QAAT,CAAkBjB,SAAlB,EAA4B;;AAExB,QAAGA,UAAUU,aAAV,GAA0BQ,KAAKC,MAAL,EAA7B,EAA2C;AACvC;AACH;;AAEDnB,cAAUG,KAAV,CAAgBiB,OAAhB,CAAwB3B,WAAW4B,cAAnC;;AAEArB,cAAUQ,IAAV;AACA,QAAGR,UAAUQ,IAAV,KAAmBR,UAAUS,YAAhC,EAA6C,CAE5C;;AAED,WAAOT,SAAP;AACH;;AAED,SAASsB,QAAT,CAAkBtB,SAAlB,EAA4B;AACxBuB,YAAQC,GAAR,CAAY,SAAZ;AACA,QAAIxB,UAAUW,kBAAV,KAAiCX,UAAUO,OAAV,CAAkBkB,MAAlB,GAA2B,CAAhE,EAAkE;AAC9DR,iBAASjB,SAAT;AACAA,kBAAUW,kBAAV,GAA+B,CAA/B;AACH,KAHD,MAII;AACAX,kBAAUW,kBAAV;AACH;;AAED,WAAOX,SAAP;AACH;;AAED,SAAS0B,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA0C;AACtCD,aAASE,UAAT,CAAoBhB,IAApB,CAAyBe,SAAzB;AACH;;AAED,SAASE,kBAAT,CAA4BC,MAA5B,EAAmCJ,QAAnC,EAA4CK,MAA5C,EAAmD;AAC/C,QAAIC,QAAQ,IAAIC,KAAJ,CAAUF,MAAV,EAAkBG,IAAlB,CAAuB,CAAvB,EAA0BC,GAA1B,CAA8B;AAAA,eAAGlB,KAAKmB,KAAL,CAAWnB,KAAKC,MAAL,EAAX,CAAH;AAAA,KAA9B,CAAZ;;AAEA,WAAOc,MAAMG,GAAN,CAAU,UAACE,IAAD,EAAMC,KAAN,EAAc;AAC3B,YAAIC,SAAS,IAAIC,GAAJ,CAAQd,SAASe,WAAT,CAAqBJ,IAArB,EAA2BK,IAA3B,CAAgCH,MAAhC,CAAuCI,OAA/C,CAAb;;AAEA,eAAO,IAAIC,SAAJ,gBAA2BN,KAA3B,EAAoCO,MAApC,EAA4CN,MAA5C,CAAP;AACH,KAJM,CAAP;AAKH;;AAED,SAASO,gBAAT,CAA0BC,IAA1B,EAA+B;AAC3BzB,YAAQC,GAAR,CAAYwB,IAAZ;AACA,WAAOA,KAAKzC,OAAL,CAAayC,KAAKrC,kBAAlB,CAAP;AACH;;QAIQf,Y,GAAAA,Y;QAAcF,I,GAAAA,I;QAAM4B,Q,GAAAA,Q;QAAUI,Y,GAAAA,Y;QAAcI,kB,GAAAA,kB;QAAoBiB,gB,GAAAA,gB","file":"game.js","sourcesContent":["import * as graphUtils from '../graph-utils/graph-utils.js';\r\n\r\nfunction test(arg){\r\n    return `this si what I passed to the function: ${arg}`;\r\n}\r\n\r\n// generate a new game state\r\nfunction newGameState(numNodes, numDistricts , numPlayers){\r\n    let gameState = {};\r\n\r\n    let graph = graphUtils.createGraph(numNodes);\r\n\r\n    gameState.nodes = graphUtils.createLiveNetwork(graph.nodes);\r\n    gameState.districts = graphUtils.createDistricts(numDistricts, gameState.nodes);\r\n    gameState.players = [];\r\n    gameState.week = 0;\r\n    gameState.nextElection = 12;\r\n    gameState.chanceOfEvent = .001;\r\n    gameState.currentPlayerIndex = 0;\r\n\r\n\r\n    for(let i=0; i<numPlayers; i++){\r\n        gameState.players.push({\r\n            name: `player ${i}`,\r\n            money:10000,\r\n            type:'human'\r\n        });\r\n    }\r\n\r\n    return gameState;\r\n\r\n}\r\n\r\n// progress the game by one week\r\nfunction nextWeek(gameState){\r\n\r\n    if(gameState.chanceOfEvent > Math.random()){\r\n        // add an issue here.\r\n    }\r\n\r\n    gameState.nodes.forEach(graphUtils.influenceNodes);\r\n\r\n    gameState.week++;\r\n    if(gameState.week === gameState.nextElection){\r\n\r\n    }\r\n\r\n    return gameState;\r\n}\r\n\r\nfunction nextTurn(gameState){\r\n    console.log(\"clicked\");\r\n    if( gameState.currentPlayerIndex === gameState.players.length - 1){\r\n        nextWeek(gameState);\r\n        gameState.currentPlayerIndex = 0;\r\n    }\r\n    else{\r\n        gameState.currentPlayerIndex++;\r\n    }\r\n\r\n    return gameState;\r\n}\r\n\r\nfunction addCandidate(district, candidate){\r\n    district.candidates.push(candidate);\r\n}\r\n\r\nfunction generateCandidates(palyer,district,number){\r\n    let seeds = new Array(number).fill(0).map(e=>Math.floor(Math.random()));\r\n\r\n    return seeds.map((seed,index)=>{\r\n        let issues = new Map(district.populations[seed].node.issues.entries)\r\n\r\n        return new Candidate(`candidate ${index}`, player, issues);\r\n    });\r\n}\r\n\r\nfunction getCurrentPlayer(game){\r\n    console.log(game);\r\n    return game.players[game.currentPlayerIndex];\r\n}\r\n\r\n\r\n\r\nexport { newGameState, test, nextTurn, addCandidate, generateCandidates, getCurrentPlayer };\r\n"]}