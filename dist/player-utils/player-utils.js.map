{"version":3,"sources":["player-utils/player-utils.js"],"names":["softmax","arr","map","value","index","Math","exp","y","reduce","a","b","issueDifference","candidate","total","issues","size","getTopFiveIssues","keys","issue","has","abs","element","get","determineVoteShare","candidates","node","results","differenceTotals","totalDifference","percentageRawDifference","percentageDifference","uuid","e","votes","turnout","population","tanh","min","forEach","floor","campaignOnNode","target","amount","set","shiftAndClip","base","shift"],"mappings":"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","file":"player-utils.js","sourcesContent":["// lifted softmax function\r\nfunction softmax(arr) {\r\n    return arr.map(function(value,index) {\r\n      return Math.exp(value) / arr.map( function(y /*value*/){ return Math.exp(y) } ).reduce( function(a,b){ return a+b })\r\n    })\r\n}\r\n\r\nfunction issueDifference(candidate){\r\n    let total = 0;\r\n    let issues = this.issues.size > 5 ? this.getTopFiveIssues : this.issues;\r\n\r\n    for(let issue of this.issues.keys()){\r\n        if(this.issues.has(issue) && candidate.issues.has(issue)){\r\n            total += Math.abs(this.element.issues.get(issue) - candidate.issues.get(issue));\r\n        }\r\n    }\r\n    return total;\r\n}\r\n\r\nfunction determineVoteShare(candidates, node){\r\n\r\n    let results = [];\r\n\r\n    let differenceTotals = candidates.map(issueDifference, node);\r\n    let totalDifference = differenceTotals.reduce((total,element)=>{\r\n        return total + element\r\n    },0);\r\n\r\n    let percentageRawDifference = differenceTotals.reduce((total,element)=>{\r\n        return total +  element/totalDifference\r\n    },0);\r\n\r\n    let percentageDifference = differenceTotals.map((element)=>{\r\n        return totalDifference/element\r\n    });\r\n\r\n    // set the election total to 0\r\n    results = candidates.map(e => { return {uuid:e.uuid, votes:0}});\r\n\r\n    // caculate voter turnout based on min difference\r\n    // using tanh for a sigmoid function, cause why not, i just need to make an idelogical difference into a proportion of 1\r\n    let turnout = node.population * (1 - Math.tanh(Math.min(...differenceTotals)));\r\n    turnout = node.population;\r\n    // console.log(`Turnout for ${node.name} was ${Math.floor((1 - Math.tanh(Math.min(...differenceTotals))) * 100)}%`);\r\n    // distribute voter turnout by share\r\n    softmax(percentageDifference).forEach((candidate, index)=>{\r\n        results[index].votes += Math.floor(turnout * candidate);\r\n        //console.log(`candidate ${election[index].name} received ${Math.floor(turnout * candidate)} (${Math.floor(100 * candidate)}%) votes from ${node.name}`)\r\n    });\r\n\r\n    return results;\r\n};\r\n\r\n\r\n\r\n// simple campaign function where changes propogate through the network\r\n// influence willbounce around with diminishing returns until its less than 0.001\r\nfunction campaignOnNode(issue, target){\r\n\r\n    return function(node){\r\n        let amount = target - node.issues.get(issue)\r\n        node.issues.set(issue, shiftAndClip(node.issues.get(issue), amount));\r\n    }\r\n\r\n}\r\n\r\n// change node issue vlaues but clips values between 0 and 1\r\nfunction shiftAndClip(base, shift){\r\n    base += shift;\r\n\r\n    if(base > 1){\r\n        base = 1;\r\n    }\r\n\r\n    if( base < 0){\r\n        base = 0;\r\n    }\r\n\r\n    return base;\r\n}\r\n\r\nexport { shiftAndClip, campaignOnNode,  determineVoteShare, softmax, issueDifference}\r\n"]}