{"version":3,"sources":["main.js"],"names":["graphUtils","softmax","arr","map","value","index","Math","exp","y","reduce","a","b","determineVoteShare","node","election","differenceTotals","current","total","issues","keys","issue","has","abs","get","totalDifference","element","percentageRawDifference","percentageDifference","turnout","population","tanh","min","forEach","candidate","votes","floor","influenceNodes","connections","connection","modifier","issueValue","set","campaignOnNode","amount","shiftAndClip","newAmount","base","shift","sortNodes","bins","numIssues","decimalPlaces","log10","size","binNumber","toFixed","createRange","split","newMap","Map","i","histogramHashmapToArray","binArray","bin","push","key","keyString","toString","mapFromObject","object","mapArray","prop","hasOwnProperty","electionRaw","name","foo","bar","scub","graph","createGraph","population1","createLiveNetwork","nodes","population2","population3","population4","population5","candidates1","liveElection","candidates2","candidates3","candidates4","candidates5","elections","console","log","electionTotals1","currentNode","histogram","sort","electionTotals","values","selectedNode1","random","length","electionTotals4","j","electionTotals2","top25","slice","electionTotals3","skubExtreamists","electionTotals5","nv","addGraph","chart","models","discreteBarChart","x","d","staggerLabels","tooltips","showValues","histogramChart","historicalBarChart","forceX","graphs","d3","select","selectAll","data","enter","append","datum","text","attr","call","utils","windowResize","update"],"mappings":"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","file":"main.js","sourcesContent":["import * as graphUtils from 'src/graph-utils/graph-utils' ;\r\n\r\n\r\n\r\n\r\n\r\n// lifted softmax function\r\nfunction softmax(arr) {\r\n    return arr.map(function(value,index) {\r\n      return Math.exp(value) / arr.map( function(y /*value*/){ return Math.exp(y) } ).reduce( function(a,b){ return a+b })\r\n    })\r\n}\r\n\r\nfunction determineVoteShare(node,election){\r\n\r\n    let differenceTotals = election.map((current)=>{\r\n        let total = 0;\r\n\r\n        for(let issue of node.issues.keys()){\r\n            if(node.issues.has(issue) && current.issues.has(issue)){\r\n                total += Math.abs(node.issues.get(issue) - current.issues.get(issue));\r\n            }\r\n        }\r\n        return total;\r\n    });\r\n\r\n    let totalDifference = differenceTotals.reduce((total,element)=>{\r\n        return total + element\r\n    },0);\r\n\r\n    let percentageRawDifference = differenceTotals.reduce((total,element)=>{\r\n        return total +  element/totalDifference\r\n    },0);\r\n\r\n    let percentageDifference = differenceTotals.map((element)=>{\r\n        return totalDifference/element\r\n    });\r\n\r\n    // caculate voter turnout based on min difference\r\n    // using tanh for a sigmoid function, cause why not, i just need to make an idelogical difference into a proportion of 1\r\n    let turnout = node.population * (1 - Math.tanh(Math.min(...differenceTotals)));\r\n\r\n    // console.log(`Turnout for ${node.name} was ${Math.floor((1 - Math.tanh(Math.min(...differenceTotals))) * 100)}%`);\r\n    // distribute voter turnout by share\r\n    softmax(percentageDifference).forEach((candidate, index)=>{\r\n        election[index].votes += Math.floor(turnout * candidate);\r\n        //console.log(`candidate ${election[index].name} received ${Math.floor(turnout * candidate)} (${Math.floor(100 * candidate)}%) votes from ${node.name}`)\r\n    });\r\n\r\n    return election;\r\n};\r\n\r\nfunction influenceNodes(node){\r\n    node.connections.forEach((connection)=>{\r\n\r\n        for(issue of node.issues.keys()){\r\n            let modifier = node.population/connection.population < 100 ? node.population/connection.population : 100;\r\n\r\n            let issueValue = connection.issues.get(issue) - ((connection.issues.get(issue) - node.issues.get(issue))/100) * modifier;\r\n            connection.issues.set(issue,issueValue);\r\n\r\n        }\r\n    });\r\n};\r\n\r\n// simple campaign function where changes propogate through the network\r\n// influence willbounce around with diminishing returns until its less than 0.001\r\nfunction campaignOnNode(issue, amount){\r\n\r\n    return function(node){\r\n        shiftAndClip(node.issues.get(issue), amount);\r\n\r\n        // console.log(`campaigning on node ${node.name} by ${amount}. Now ${node.issues.get(issue)}`);\r\n\r\n        let newAmount = amount / 2;\r\n\r\n        if(newAmount > 0.1){\r\n            node.connections.forEach(campaignOnNode(issue, newAmount));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// change node issue vlaues but clips values between 0 and 1\r\nfunction shiftAndClip(base, shift){\r\n    base += shift;\r\n\r\n    if(base > 1){\r\n        base = 1;\r\n    }\r\n\r\n    if( base < 0){\r\n        base = 0;\r\n    }\r\n\r\n    return base;\r\n}\r\n\r\n//make a distribution of nodes based on average of issues\r\nfunction sortNodes(bins, node){\r\n    let total = 0;\r\n    let numIssues = 0;\r\n    let decimalPlaces = Math.log10(bins.size);\r\n\r\n\r\n    for(issue of node.issues.keys()){\r\n        total += node.issues.get(issue);\r\n        numIssues++;\r\n    }\r\n\r\n    let binNumber = (total/numIssues).toFixed(decimalPlaces);\r\n\r\n    if(bins.has(binNumber)){\r\n        bins.set(binNumber,bins.get(binNumber) + 1);\r\n    }\r\n    else{\r\n        bins.set(binNumber, 1);\r\n    }\r\n\r\n    return bins;\r\n}\r\n\r\nfunction createRange(split){\r\n    let newMap = new Map();\r\n\r\n    for(let i =0; i<=1; i+= 1/split){\r\n        newMap.set(i.toFixed(Math.log10(split)), 0);\r\n    }\r\n\r\n    return newMap;\r\n}\r\n\r\nfunction histogramHashmapToArray(bins){\r\n    let binArray = [];\r\n\r\n    for(let bin of bins.keys()){\r\n        binArray.push({\r\n            key:bin,\r\n            keyString:bin.toString(),\r\n            value:bins.get(bin)\r\n        })\r\n    }\r\n\r\n    return binArray;\r\n}\r\n\r\nfunction mapFromObject(object){\r\n    let mapArray = [];\r\n\r\n    for(prop in object){\r\n        if(object.hasOwnProperty(prop)){\r\n            mapArray.push([prop,object[prop]]);\r\n        }\r\n    }\r\n\r\n    return new Map(mapArray);\r\n}\r\n\r\nlet electionRaw = [\r\n    {\r\n        name:\"moderate\",\r\n        issues:{\r\n            foo:.5,\r\n            bar:.5,\r\n            scub:.5\r\n        },\r\n        votes:0\r\n    },\r\n    {\r\n        name:\"extreme\",\r\n        issues:{\r\n            foo:1,\r\n            bar:1,\r\n            scub:1\r\n        },\r\n        votes:0\r\n    },\r\n    {\r\n        name:\"extreme otherway\",\r\n        issues:{\r\n            foo:0,\r\n            bar:0,\r\n            scub:0\r\n        },\r\n        votes:0\r\n    },\r\n    {\r\n        name:\"moderate 2\",\r\n        issues:{\r\n            foo:0.5,\r\n            bar:0.5,\r\n            scub:0.55\r\n        },\r\n        votes:0\r\n    },\r\n    {\r\n        name:\"Leans skub\",\r\n        issues:{\r\n            foo:0.5,\r\n            bar:0.5,\r\n            scub:0.85\r\n        },\r\n        votes:0\r\n    },\r\n    {\r\n        name:\"pro-Scub\",\r\n        issues:{\r\n            foo:0.5,\r\n            bar:0.5,\r\n            scub:1\r\n        },\r\n        votes:0\r\n    }\r\n];\r\n\r\nlet graph = graphUtils.createGraph(1000);\r\n\r\nlet population1 = createLiveNetwork(graph.nodes);\r\nlet population2 = createLiveNetwork(graph.nodes);\r\nlet population3 = createLiveNetwork(graph.nodes);\r\nlet population4 = createLiveNetwork(graph.nodes);\r\nlet population5 = createLiveNetwork(graph.nodes);\r\n\r\nlet candidates1 = electionRaw.map(liveElection);\r\nlet candidates2 = electionRaw.map(liveElection);\r\nlet candidates3 = electionRaw.map(liveElection);\r\nlet candidates4 = electionRaw.map(liveElection);\r\nlet candidates5 = electionRaw.map(liveElection);\r\n\r\n// collect elections for graphing\r\nlet elections = [];\r\n\r\nconsole.log(\"%c Raw population: election with bare network\", 'background: #222; color: #bada55');\r\n\r\nlet electionTotals1 = population1.reduce((election,currentNode)=>{\r\n    return determineVoteShare(currentNode,election)\r\n},candidates1);\r\n\r\nconsole.log(electionTotals1);\r\nelections.push({\r\n    histogram:histogramHashmapToArray(population1.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key ),\r\n    electionTotals:[{\r\n        key:\"Raw population: election with bare network\",\r\n        values:electionTotals1\r\n    }]\r\n});\r\n\r\nconsole.log(\"%c Raw population: election with bare network after campaigning on a single node\", 'background: #222; color: #bada55');\r\n\r\nlet selectedNode1 = Math.floor(Math.random() * population4.length);\r\n\r\ncampaignOnNode(\"scub\", 1)(population4[selectedNode1]);\r\n\r\nlet electionTotals4 = population4.reduce((election,currentNode)=>{\r\n    return determineVoteShare(currentNode,election)\r\n},candidates4);\r\n\r\nconsole.log(electionTotals4);\r\nelections.push({\r\n    histogram:histogramHashmapToArray(population4.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key ),\r\n    electionTotals:[{\r\n        key:\"Raw population: election with bare network after campaigning on a single node\",\r\n        values:electionTotals4\r\n    }]\r\n});\r\n\r\nconsole.log(\"%c after 10 weeks of node influencing one another\", 'background: #222; color: #bada55');\r\n\r\nfor(let j = 0; j < 10; j++){\r\n    population2.forEach(influenceNodes);\r\n}\r\n\r\nlet electionTotals2 = population2.reduce((election,currentNode)=>{\r\n    return determineVoteShare(currentNode,election);\r\n},candidates2);\r\n\r\nconsole.log(electionTotals2);\r\n\r\nelections.push({\r\n    histogram:histogramHashmapToArray(population2.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key ),\r\n    electionTotals:[{\r\n        key:\"after 10 weeks of node influencing one another\",\r\n        values:electionTotals2\r\n    }]\r\n});\r\n\r\n\r\nconsole.log(\"%c after 10 weeks of campaigning on the top 25% random nodes\", 'background: #222; color: #bada55');\r\n\r\nlet top25 = population3.sort((a,b)=> a.connections.length > b.connections.length).slice(0,Math.floor(population3.length/2));\r\n\r\nfor(let j = 0; j < 10; j++){\r\n    top25.forEach(campaignOnNode(\"scub\", 1));\r\n    population3.forEach(influenceNodes);\r\n}\r\n\r\nlet electionTotals3 = population3.reduce((election,currentNode)=>{\r\n    return determineVoteShare(currentNode,election);\r\n},candidates3);\r\n\r\nconsole.log(electionTotals3);\r\nelections.push({\r\n    histogram:histogramHashmapToArray(population3.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key ),\r\n    electionTotals:[{\r\n        key:\"after 10 weeks of campaigning on the top 50% random nodes\",\r\n        values:electionTotals3\r\n    }]\r\n});\r\n\r\nconsole.log(\"%c after 10 weeks of influencing when 25% of the nodes are scub extreamists\", 'background: #222; color: #bada55');\r\n\r\nlet skubExtreamists = population5.slice(0,Math.floor(population5.length / 2));\r\nskubExtreamists.forEach((node)=>{\r\n    node.issues.scub = 1;\r\n});\r\n\r\nfor(let j = 0; j < 10; j++){\r\n    population5.forEach(influenceNodes);\r\n}\r\n\r\nlet electionTotals5 = population5.reduce((election,currentNode)=>{\r\n    return determineVoteShare(currentNode,election);\r\n},candidates5);\r\n\r\nconsole.log(electionTotals5);\r\nelections.push({\r\n    histogram:histogramHashmapToArray(population5.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key ),\r\n    electionTotals:[{\r\n        key:\"after 10 weeks of influencing when 50% of the nodes are scub extremists\",\r\n        values:electionTotals5\r\n    }]\r\n});\r\n\r\n\r\nlet histogram = histogramHashmapToArray(population3.reduce(sortNodes,createRange(100))).sort((a,b)=> a.key>b.key );\r\n\r\nnv.addGraph(function() {\r\n  var chart = nv.models.discreteBarChart()\r\n      .x(function(d) { return d.name })    //Specify the data accessors.\r\n      .y(function(d) { return d.votes })\r\n      .staggerLabels(true)    //Too many bars and not enough room? Try staggering labels.\r\n      .tooltips(false)        //Don't show tooltips\r\n      .showValues(true)       //...instead, show the bar value right on top of each bar.\r\n      //.transitionDuration(350)\r\n      ;\r\n\r\nlet histogramChart = nv.models.historicalBarChart()\r\n                .x(function(d) { return d.key })    //Specify the data accessors.\r\n                .y(function(d) { return d.value })\r\n                .forceX([0,1]);\r\n\r\nlet graphs = d3.select('#graph-container')\r\n        .selectAll(\"svg\")\r\n      .data(elections)\r\n      .enter()\r\n      .append(\"div\");\r\n\r\ngraphs.append(\"H1\")\r\n      .datum(function(d){\r\n          return d.electionTotals\r\n      })\r\n      .text(function(d){\r\n          return d[0].key;\r\n      });\r\n\r\ngraphs.append(\"svg\")\r\n        .attr(\"height\",200)\r\n        .datum(function(d){\r\n            return d.electionTotals\r\n        })\r\n      .call(chart);\r\n\r\ngraphs.append(\"svg\")\r\n    .attr(\"height\",200)\r\n    .datum(function(d){\r\n        return[{\r\n            key:d.electionTotals.key,\r\n            values:d.histogram\r\n        }]\r\n    })\r\n    .call(histogramChart);\r\n\r\n  nv.utils.windowResize(chart.update);\r\n  nv.utils.windowResize(histogramChart.update);\r\n\r\n  return chart;\r\n});\r\n"]}