{"version":3,"sources":["player-utils.js"],"names":["softmax","arr","map","value","index","Math","exp","y","reduce","a","b","issueDifference","candidate","total","issues","size","getTopFiveIssues","keys","issue","has","abs","get","determineVoteShare","election","node","differenceTotals","totalDifference","element","percentageRawDifference","percentageDifference","turnout","population","tanh","min","forEach","votes","floor","campaignOnNode","amount","set","shiftAndClip","newAmount","connections","base","shift"],"mappings":"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","file":"build.js","sourcesContent":["// lifted softmax function\r\nfunction softmax(arr) {\r\n    return arr.map(function(value,index) {\r\n      return Math.exp(value) / arr.map( function(y /*value*/){ return Math.exp(y) } ).reduce( function(a,b){ return a+b })\r\n    })\r\n}\r\n\r\nfunction issueDifference(candidate){\r\n    let total = 0;\r\n    let issues = this.issues.size > 5 ? this.getTopFiveIssues : this.issues;\r\n\r\n    for(let issue of this.issues.keys()){\r\n        if(this.issues.has(issue) && candidate.issues.has(issue)){\r\n            total += Math.abs(this.issues.get(issue) - candidate.issues.get(issue));\r\n        }\r\n    }\r\n    return total;\r\n}\r\n\r\nfunction determineVoteShare(election, node){\r\n\r\n    let differenceTotals = election.map(issueDifference, node);\r\n\r\n    let totalDifference = differenceTotals.reduce((total,element)=>{\r\n        return total + element\r\n    },0);\r\n\r\n    let percentageRawDifference = differenceTotals.reduce((total,element)=>{\r\n        return total +  element/totalDifference\r\n    },0);\r\n\r\n    let percentageDifference = differenceTotals.map((element)=>{\r\n        return totalDifference/element\r\n    });\r\n\r\n    // caculate voter turnout based on min difference\r\n    // using tanh for a sigmoid function, cause why not, i just need to make an idelogical difference into a proportion of 1\r\n    let turnout = node.population * (1 - Math.tanh(Math.min(...differenceTotals)));\r\n\r\n    // console.log(`Turnout for ${node.name} was ${Math.floor((1 - Math.tanh(Math.min(...differenceTotals))) * 100)}%`);\r\n    // distribute voter turnout by share\r\n    softmax(percentageDifference).forEach((candidate, index)=>{\r\n        election[index].votes += Math.floor(turnout * candidate);\r\n        //console.log(`candidate ${election[index].name} received ${Math.floor(turnout * candidate)} (${Math.floor(100 * candidate)}%) votes from ${node.name}`)\r\n    });\r\n\r\n    return election;\r\n};\r\n\r\n\r\n\r\n// simple campaign function where changes propogate through the network\r\n// influence willbounce around with diminishing returns until its less than 0.001\r\nfunction campaignOnNode(issue, amount){\r\n\r\n    return function(node){\r\n        node.issues.set(issue, shiftAndClip(node.issues.get(issue), amount));\r\n\r\n        // console.log(`campaigning on node ${node.name} by ${amount}. Now ${node.issues.get(issue)}`);\r\n\r\n        let newAmount = amount / 2;\r\n\r\n        if(newAmount > 0.1){\r\n            node.connections.forEach(campaignOnNode(issue, newAmount));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// change node issue vlaues but clips values between 0 and 1\r\nfunction shiftAndClip(base, shift){\r\n    base += shift;\r\n\r\n    if(base > 1){\r\n        base = 1;\r\n    }\r\n\r\n    if( base < 0){\r\n        base = 0;\r\n    }\r\n\r\n    return base;\r\n}\r\n\r\nexport { shiftAndClip, campaignOnNode,  determineVoteShare, softmax}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}